# Core functionality of Rex
# by Efnilite (https://efnilite.dev)

# For testing

(defn test
    "Evaluates xs. If any element in xs is not true, fails this test."
    [name & xs] (dev.efnilite.rex.RT/test name xs))

(defn throw
    "Throws an exception."
    [] (dev.efnilite.rex.RT/throww nil)
    [message] (dev.efnilite.rex.RT/throww message))

(defn throws?
    "Returns true when evaluation of fn throws an exception. fn should have no args."
    [fn] (dev.efnilite.rex.RT/throws fn))

# Basic boolean operators

(defn not [x] (dev.efnilite.rex.RT/not x))

# is?

(defn is? [x class] (dev.efnilite.rex.RT/iss x class))

(defn str? "Returns true when x is a string." [x] (is? x "java.lang.String"))

(defn num? "Returns true when x is a number." [x] (is? x "java.lang.Number"))

(defn int? "Returns true when x is an integer." [x] (is? x "java.lang.Integer"))

(defn double? "Returns true when x is a double." [x] (is? x "java.lang.Double"))

(defn long? "Returns true when x is a long." [x] (is? x "java.lang.Long"))

(defn boolean? "Returns true when x is a boolean." [x] (is? x "java.lang.Boolean"))

(defn array? "Returns true when x is an array." [x] (is? x "dev.efnilite.rex.Arr"))

(defn map? "Returns true when x is a map." [x] (is? x "dev.efnilite.rex.Mp"))

(defn fn? "Returns true when x is an anonymous fn." [x] (is? x "dev.efnilite.rex.AFn"))

# if

(defn if [cond t f] (dev.efnilite.rex.RT/iff cond t f))

# Collection fns

(defn count
    "Returns the number of items in a collection."
    [coll] (dev.efnilite.rex.RT/count coll))

(defn get
    "Returns the item associated at k in a collection or map."
    [x k] (dev.efnilite.rex.RT/get x k))

(defn drop
    "Returns a collection without the first n items."
    [n coll] (dev.efnilite.rex.RT/drop n coll))

(defn take
    "Returns the first n items in a collection."
    [n coll] (dev.efnilite.rex.RT/take n coll))

(defn rest
    "Returns all but the first item in a collection."
    [coll] (dev.efnilite.rex.RT/rest coll))

(defn reduce
    "Reduces a collection using fn. If init is not provided, the first and second item are used."
    [f coll] (dev.efnilite.rex.RT/reduce f (f (first coll) (second coll)) (rest coll))
    [f init coll] (dev.efnilite.rex.RT/reduce f init coll))

(defn filter
    "Filters elements in coll where f returns true. f should have one argument."
    [f coll] (reduce (fn [r x] (if (f x) (dev.efnilite.rex.RT/add r x) r)) coll))

# Math operators

(defn +
    "Adds numbers. If no args, returns 0. If one arg, returns arg. If more than one arg, returns the sum of all args."
    [] 0
    [a] a
    [a b] (dev.efnilite.rex.RT/add a b)
    [a b & r] (reduce - (- a b) r))

(defn -
    "Subtracts numbers. If no args, returns 0. If one arg, returns arg. If more than one arg, returns the subtraction of all args."
    [] 0
    [a] a
    [a b] (dev.efnilite.rex.RT/subtract a b)
    [a b & r] (reduce - (- a b) r))

(defn *
    "Multiplies numbers. If no args, returns 1. If one arg, returns arg. If more than one arg, returns the product of all args."
    [] 1
    [a] a
    [a b] (dev.efnilite.rex.RT/multiply a b)
    [a b & r] (reduce * (* a b) r))

(defn /
    "Divides numbers. If no args, returns 1. If one arg, returns arg. If more than one arg, returns the division of all args."
    [] 1
    [a] a
    [a b] (dev.efnilite.rex.RT/divide a b)
    [a b & r] (reduce / (/ a b) r))

# Misc

(defn identity "Returns x." [x] x)