# Core functionality of Rex
# by Efnilite (https://efnilite.dev)

# For testing

(defn test
    "Evaluates xs. If any element in xs is not true, fails this test."
    [name & xs] (dev.efnilite.rex.RT/test name xs))

(defn throw
    "Throws an exception."
    [] (dev.efnilite.rex.RT/throww nil)
    [message] (dev.efnilite.rex.RT/throww message))

(defn throws?
    "Returns true when evaluation of fn throws an exception. fn should have no args."
    [f] (dev.efnilite.rex.RT/throws f))

(defn =
    "Returns true when a equals b, false if not."
    [a b] (dev.efnilite.rex.RT/eq a b))

(defn not "Returns true if x is logical false, else false." [x] (dev.efnilite.rex.RT/not x))

(defn not=
    "Returns true when a does not equal b, false if not."
    [a b] (not (= a b)))

# Collection fns

(defn conj
    "Returns a new collection with x added to coll."
    [] []
    [coll] coll
    [coll x] (.conj coll x)
    [coll x & xs] (reduce conj (conj coll x) xs))

(defn count
    "Returns the number of items in coll."
    [coll] (if (str? coll) (.length coll) (.getSize coll)))

(defn empty?
    "Returns true when coll is empty."
    [coll] (= 0 (count coll)))

(defn get
    "Returns the item associated at k in a collection or map."
    [x k] (if (str? x) (.charAt x k) (.get x k)))

(defn first
    "Returns the first item in coll."
    [coll] (get coll 0))

(defn second
    "Returns the second item in coll."
    [coll] (get coll 1))

(defn last
    "Returns the last item in coll."
    [coll] (get coll (- (count coll) 1)))

(defn drop
    "Returns coll without the first n items."
    [n coll] (dev.efnilite.rex.RT/drop n coll))

(defn take
    "Returns the first n items in coll."
    [n coll] (dev.efnilite.rex.RT/take n coll))

(defn rest
    "Returns all but the first item in coll."
    [coll] (drop 1 coll))

(defn reduce
    "fn should have 2 arguments. Applies fn to items in coll, keeping results inbetween.
    If init is not provided, fn is called on the first and second item."
    [f coll] (dev.efnilite.rex.RT/reduce f coll)
    [f init coll] (dev.efnilite.rex.RT/reduce f init coll))

(defn map
    "Applies f to every item in coll."
    [f' coll] # todo fix f being overriden in reduce
    (reduce (fn [acc x] (conj acc (f' x))) [] coll))

(defn filter
    "Returns every item in coll where (f x) returns logical true."
    [f' coll] (reduce (fn [acc x] (if (f' x) (conj acc x) acc)) [] coll))

# Basic boolean operators

# todo optimize by recur and return on first false
(defn and
    "Returns logical conjunction of xs. (and) returns true. (and x) returns x."
    [] true
    [x] x
    [& xs] (reduce (fn [a b] (if (not a) false b)) xs))

(defn or
    "Returns logical disjunction of xs. (or) returns true. (or x) returns x."
    [] true
    [x] x
    [& xs] (reduce (fn [a b] (if a true b)) xs))

# instances and values

(defn is? [x class] (dev.efnilite.rex.RT/iss x class))

(defn str? "Returns true when x is a string." [x] (is? x "java.lang.String"))

(defn num? "Returns true when x is a number." [x] (is? x "java.lang.Number"))

(defn int? "Returns true when x is an integer." [x] (is? x "java.lang.Integer"))

(defn double? "Returns true when x is a double." [x] (is? x "java.lang.Double"))

(defn long? "Returns true when x is a long." [x] (is? x "java.lang.Long"))

(defn boolean? "Returns true when x is a boolean." [x] (is? x "java.lang.Boolean"))

(defn array? "Returns true when x is an array." [x] (is? x "dev.efnilite.rex.Arr"))

(defn map? "Returns true when x is a map." [x] (is? x "dev.efnilite.rex.Mp"))

(defn fn? "Returns true when x is an anonymous fn." [x] (is? x "dev.efnilite.rex.AFn"))

(defn nil? "Returns true when x is nil." [x] (= x nil))

# Math operators

(defn inc "Increments x by 1." [x] (+ x 1))

(defn dec "Decrements x by 1." [x] (- x 1))

(defn +
    "Adds numbers. If no args, returns 0. If one arg, returns arg. If more than one arg, returns the sum of all args."
    [] 0
    [a] a
    [a b] (dev.efnilite.rex.RT/add a b)
    [a b & r] (reduce - (- a b) r))

(defn -
    "Subtracts numbers. If no args, returns 0. If one arg, returns arg. If more than one arg, returns the subtraction of all args."
    [] 0
    [a] a
    [a b] (dev.efnilite.rex.RT/subtract a b)
    [a b & r] (reduce - (- a b) r))

(defn *
    "Multiplies numbers. If no args, returns 1. If one arg, returns arg. If more than one arg, returns the product of all args."
    [] 1
    [a] a
    [a b] (dev.efnilite.rex.RT/multiply a b)
    [a b & r] (reduce * (* a b) r))

(defn /
    "Divides numbers. If no args, returns 1. If one arg, returns arg. If more than one arg, returns the division of all args."
    [] 1
    [a] a
    [a b] (dev.efnilite.rex.RT/divide a b)
    [a b & r] (reduce / (/ a b) r))

# Misc

(defn identity "Returns x." [x] x)

(defn str
    "Returns a string representation of xs. (str) returns an empty string."
    [] ""
    [& xs] (dev.efnilite.rex.RT/join xs " "))

(defn println
    "Prints x."
    [] (dev.efnilite.rex.RT/pprintln "")
    [& xs] (dev.efnilite.rex.RT/pprintln (str xs)))